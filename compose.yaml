services:
    traefik:
        image: traefik:v2.10.4
        hostname: traefik
        depends_on:
            frontend:
                condition: service_healthy
        command:
            - "--providers.docker=true"  # Usa il provider Docker per configurare i backend

            - "--entrypoints.http.address=:80"  # Porta HTTP
            - "--entrypoints.https.address=:443"  # Porta HTTPS
            - "--entrypoints.api.address=:8080"  # Porta API esposta

            - "--entrypoints.http.http.redirections.entryPoint.to=https"  # Reindirizza le richieste HTTP a HTTPS
            - "--certificatesresolvers.resolver.acme.httpchallenge=true"  # Utilizza la sfida HTTP per ottenere i certificati ACME
            - "--certificatesresolvers.resolver.acme.httpchallenge.entrypoint=http"  # Utilizza la porta HTTP per la sfida ACME
            - "--certificatesresolvers.resolver.acme.email=your@email.com"  # La tua email per i certificati ACME
            - "--certificatesresolvers.resolver.acme.storage=/acme.json/acme.json"  # Memorizza i certificati ACME
        ports:
            - "80:80"  # Porta HTTP esposta
            - "443:443"  # Porta HTTPS esposta
            - "8080:8080"  # Porta API esposta
        volumes:
            - "./acme.json:/acme.json/acme.json"  # Monta la directory per il salvataggio dei certificati ACME
            - "/var/run/docker.sock:/var/run/docker.sock:ro"  # Condividi il socket Docker per la configurazione dinamica
        healthcheck:
            test: [ "CMD", "wget", "--no-check-certificate", "--spider", "https://localhost" ]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 5s

    backend:
        hostname: backend
        build:
            context: .
            dockerfile: Dockerfile
        depends_on:
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
        environment:
            - 'SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/mydatabase'
            - 'SPRING_DATASOURCE_USERNAME=myuser'
            - 'SPRING_DATASOURCE_PASSWORD=secret'
            - 'SPRING_REDIS_HOST=redis'
            - 'SPRING_REDIS_PORT=6379'
            - 'SPRING_JPA_HIBERNATE_DDL-AUTO=update'
            - 'SPRING_JPA_OPEN-IN-VIEW=false'
        healthcheck:
            test: curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 10s
        links:
            - postgres
            - redis
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.backend.tls=true"  # Abilita TLS per questa route
            - "traefik.http.routers.backend.entrypoints=api"
            - "traefik.http.services.backend.loadbalancer.server.port=8080"
            - "traefik.http.routers.backend.rule=Host(`localhost`)"
            - "traefik.http.routers.backend.tls.certresolver=resolver"  # Utilizza il resolver dei certificati configurato in Traefik

    postgres:
        image: 'postgres:15.4'
        hostname: postgres
        restart: unless-stopped
        environment:
            - 'POSTGRES_DB=mydatabase'
            - 'POSTGRES_PASSWORD=secret'
            - 'POSTGRES_USER=myuser'
        volumes:
            - postgres-data:/var/lib/postgresql/data
        healthcheck:
            test: [ "CMD-SHELL", "sh -c 'pg_isready -U myuser -d mydatabase'" ]
            interval: 2s
            timeout: 2s
            retries: 5
            start_period: 2s
        # TODO: remove this
        ports:
            - "5432:5432"

    frontend:
        extends: # extends the frontend service from the docker-compose.yaml file in the parent directory
            file: ~/WebstormProjects/PassportEase/docker-compose.yaml
            service: frontend
        hostname: frontend
        healthcheck: # healthcheck for vite + react server (see if curl response is 200 OK)
            test: curl --fail --silent localhost:5173/ || exit 1
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 5s
        depends_on: # depends on backend service
            backend:
                condition: service_healthy
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.frontend.tls=true"  # Abilita TLS per questa route
            - "traefik.http.routers.frontend.entrypoints=https"
            - "traefik.http.services.frontend.loadbalancer.server.port=5173"
            - "traefik.http.routers.frontend.rule=Host(`localhost`)"
            - "traefik.http.routers.frontend.tls.certresolver=resolver"  # Utilizza il resolver dei certificati configurato in Traefik

    redis:
        image: 'redis:6.2.13'
        hostname: redis
        restart: unless-stopped
        healthcheck:
            test: [ "CMD", "redis-cli", "ping" ]
            interval: 3s
            timeout: 3s
            retries: 30

volumes:
    postgres-data:
        external: false

networks:
    traefik-network: # Crea una rete separata per Traefik
        external: false
        driver: bridge